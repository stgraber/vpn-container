#!/bin/sh -eu

### Usage
if [ -z "${1:-}" ] || [ -z "${2:-}" ]; then
    echo "Usage: ${0} [--opts='openvpn args'] <VPN name> <VPN config> [byobu|tmux]"
    echo " e.g.: ${0}  --opts='--pull dhcp-options --up /etc/openvpn/update-resolv-conf --script-security 2'  ..."
    exit 1
fi

### Argument parsing
OPENVPN_OPTS=
OPENVPN_DEFAULT="false"
case "${1}" in
    --opts=*)
        # shellcheck disable=SC2034
        OPENVPN_OPTS="${1#--opts=}"
        shift
    ;;
    --default-gateway)
        OPENVPN_DEFAULT="true"
        shift
    ;;
esac

VPN_NAME=${1}
VPN_CONFIG=${2}
MULTIPLEXER=${3:-"byobu"}
WORKDIR="${XDG_RUNTIME_DIR:-~/.cache}/vpn-container"
[ -d "${WORKDIR}" ] || mkdir -p "${WORKDIR}"

### Check if already running
[ ! -e "${WORKDIR}/${VPN_NAME}.sock" ] || (echo "VPN is already running" && exit 1)

### Setup exit cleanup
cleanup() {
    set +eu

    # Wait for things to finish
    wait "${NS_PID}" >/dev/null 2>&1

    kill -9 "${SOCAT_PID}" >/dev/null 2>&1
    rm -f "${WORKDIR}/${VPN_NAME}.sock" "${WORKDIR}/${VPN_NAME}.sock_in"
}
trap cleanup EXIT HUP INT TERM

### Dependency check
which socat >/dev/null \
    || (echo "Please: sudo apt install socat" && exit 1)
which unshare >/dev/null \
    || (echo "Please: sudo apt install util-linux" && exit 1)
which openvpn >/dev/null \
    || (echo "Please: sudo apt install openvpn" && exit 1)
which "${MULTIPLEXER}" >/dev/null \
    || (echo "Please: sudo apt install ${MULTIPLEXER}" && exit 1)

### Config parsing
# shellcheck disable=SC2046
VPN_SERVER="$(set -- $(grep ^remote "${VPN_CONFIG}") && echo "${2:-}")"
# shellcheck disable=SC2046
VPN_PORT="$(set -- $(grep ^remote "${VPN_CONFIG}") && echo "${3:-}")"
# shellcheck disable=SC2046
VPN_PROTO="$(set -- $(grep ^proto "${VPN_CONFIG}") && echo "${2:-}" | cut -d- -f1)"

if [ -z "${VPN_PROTO}" ]; then
    # shellcheck disable=SC2046
    VPN_PROTO=$(set -- $(grep ^remote "${VPN_CONFIG}") && echo "${4:-}")
fi

if [ -z "${VPN_PROTO}" ]; then
    VPN_PROTO=udp
fi

if [ -z "${VPN_SERVER}" ]; then
    echo "Missing remote server in configuration." >&2
    exit 1
fi

case "$VPN_PROTO" in
    tcp|tcp6)
         LPORT=""
         SOCK_HOST="UNIX-LISTEN:${WORKDIR}/${VPN_NAME}.sock"
         SOCK_GUEST="UNIX-CLIENT:${WORKDIR}/${VPN_NAME}.sock"
         ;;
    udp|udp6)
         LPORT="--nobind --float"
         SOCK_HOST="UNIX-SENDTO:${WORKDIR}/${VPN_NAME}.sock_in,bind=${WORKDIR}/${VPN_NAME}.sock"
         SOCK_GUEST="UNIX-SENDTO:${WORKDIR}/${VPN_NAME}.sock,bind=${WORKDIR}/${VPN_NAME}.sock_in"
         ;;
    *)   echo "Only tcp or udp VPNs are supported at this time." >&2
         exit 1
         ;;
esac

### Setup the relay
socat "${VPN_PROTO}:${VPN_SERVER}:${VPN_PORT:-"1194"}" "${SOCK_HOST}" &
SOCAT_PID=$!

### Exec stage-2
(
cat << EOF
cleanup() {
    rm -f ${WORKDIR}/${VPN_NAME}.console
    rm -Rf \$TEMPDIR
}
trap cleanup EXIT HUP INT TERM

# Setup proc
mount -t proc proc /proc

# Setup loopback
ip addr add dev lo 127.0.0.1/32
ip link set dev lo up

# Bind the OpenVPN socket
socat ${SOCK_GUEST} ${VPN_PROTO}-LISTEN:${VPN_PORT:-"1194"} &
sleep 0.5

# Configure DNS
mkdir -p /run/resolvconf/
mount -t tmpfs tmpfs /run/resolvconf/
[ -d /etc/resolvconf/resolv.conf.d/ ] && mount -t tmpfs tmpfs /etc/resolvconf/resolv.conf.d/
mkdir /run/resolvconf/interface
touch /run/resolvconf/enable-updates

# Setup a temporary directory
TEMPDIR=\$(mktemp -d)

# Setup NSS
echo "root:x:0:" > \$TEMPDIR/group
echo "tty:x:0:" >> \$TEMPDIR/group
mount --bind \$TEMPDIR/group /etc/group

echo "${USER}:x:0:0:root:${HOME}:/bin/bash" > \$TEMPDIR/passwd
mount --bind \$TEMPDIR/passwd /etc/passwd

# Setup MOTD
cat > \$TEMPDIR/motd << EMOTD
Welcome to ${VPN_NAME}!

This shell and any other ${MULTIPLEXER} tab you may open is running in a
minimal container. Even though you may appear to be root, you are not,
uid 0 is actually mapped to your regular uid ($(id -u)).

All network traffic from this container will be sent over the VPN.
To terminate the VPN, simply close all tabs or call: ${MULTIPLEXER} kill-server

EMOTD
if [ -e "/run/motd.dynamic" ]; then
    mount --bind \$TEMPDIR/motd /run/motd.dynamic
    export MOTD=/run/motd.dynamic
else
    export MOTD=\$TEMPDIR/motd
fi

# Configure the hostname
hostname ${VPN_NAME}

# Configure OpenVPN
echo "#!/bin/sh" > \$TEMPDIR/vpn-up

if [ -f /etc/openvpn/update-resolv-conf ]; then
    echo "/etc/openvpn/update-resolv-conf \\\$@" >> \$TEMPDIR/vpn-up
fi

if [ "${OPENVPN_DEFAULT}" = "true" ]; then
    echo "ip -4 route add default dev \\\$1" >> \$TEMPDIR/vpn-up
    echo "ip -6 route add default dev \\\$1" >> \$TEMPDIR/vpn-up
fi

echo "exit 0" >> \$TEMPDIR/vpn-up
chmod +x \$TEMPDIR/vpn-up
OPENVPN_OPTS="--script-security 2 --up \$TEMPDIR/vpn-up \$OPENVPN_OPTS"

# Start OpenVPN in ${MULTIPLEXER}
cd "$(dirname "${VPN_CONFIG}")"
${MULTIPLEXER} -S ${WORKDIR}/${VPN_NAME}.console new-session -n VPN -d \
    "openvpn --remote 127.0.0.1 ${VPN_PORT:-"1194"} --config ${VPN_CONFIG} ${LPORT} --user ${USER} --group root \$OPENVPN_OPTS; bash"
cd $PWD

# Ready
while ${MULTIPLEXER} -S ${WORKDIR}/${VPN_NAME}.console list-sessions >/dev/null 2>&1; do
    sleep 0.5
done
EOF
) | unshare -U -r -n -m -u -p -f -- /bin/sh &
NS_PID=$!

# Wait for the namespace to get setup
timeout=60
while [ ! -e "${WORKDIR}/${VPN_NAME}.console" ] && [ "${timeout}" -gt "0" ]; do
    sleep 0.5
    timeout=$((timeout-1))
done

if [ "${timeout}" = "0" ]; then
    echo "VPN failed to start" >&2
    exit 1
else
    # Attach to session
    while $MULTIPLEXER -S "${WORKDIR}/${VPN_NAME}.console" list-sessions >/dev/null 2>&1; do
        $MULTIPLEXER -S "${WORKDIR}/${VPN_NAME}.console" new-window -t 1 -c "$HOME" \
            "cat \${MOTD} ; bash"
            >/dev/null 2>&1 || true
        $MULTIPLEXER -S "${WORKDIR}/${VPN_NAME}.console" attach
    done
fi

exit 0
